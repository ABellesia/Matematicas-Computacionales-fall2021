#!/usr/bin/env python
# coding: utf-8

# # Tarea 1: Ejercicios del Proyecto Euler
# ### Andrea Bellesia 188642

# ## Problema 1: 
# 
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# 
# Find the sum of all the multiples of 3 or 5 below 1000.

# ### Solución 1: Listas de comprensión
# 
# Se nos pide sumar todos los múltiplos de 3 o múltiplos de 5 menores a 1000. 
#     
# Para eso, en la primera parte de la instrucción, establecemos una variable "i", la cuál variará entre 0 y 1000. Es importante notar que se suman los números *estrictamente menores* a 1000, es por esto que en la instrucción *in range()*, la cual es excluyente, se escribe el número 1000 y no 10001. De otra forma se tomaría en cuenta el número 1000 en la suma. 
#     
# En la segunda parte de la instrucción se establece la condición de que los números a sumar sean múltiplos de 3 o de 5. Para eso se utiliza el *módulo* igualado a 0. 
# 
# Fianlmente se imprime el resultado: 233168

# In[7]:


#El ejercicio se puede resolver fácilmente utilizando listas de comprensión:|
sum(i for i in range(1000) if(i%3==0 or i%5==0))


# ### Solución 2: Funciones
# 
# Se utiliza la misma lógica que en la solución anterior, simplemente se separan las instrucciones para ponerlas en una función. 

# In[12]:


def suma_1000():
    res = 0 #se declara una variable donde se irán sumando los múltiplos
    for i in range (1000):  #se establece el rango en el que variarán los números que se sumarán
        if(i%3 == 0 or i%5 == 0):  #se establece la condición de multiplicidad
            res += i  #en caso de ser múltiplo, se suma el número al resultado
    return str(res)  #se regresa una cadena de caracteres con el resultado


print('La suma de los mútiplos de tres y de 5 menores a 1000 es: ')
print(suma_1000())            


# ## Problema 2:
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms

# ## Solución
# 
# Se declara una función que corra toda la serie de fibonacci, y si el número es par, entonces lo agrega a la suma, de no ser así, se sigue al siguiente número de la serie

# In[25]:


def suma_fibo():
    ant, sig, res  = 1, 2, 0 
    '''
    la variable ant respresenta al valor previo de la serie; la variable sig represent al valor siguiente de la serie
    en la variable res se irá guardando la suma de tos números pares de la serie de Fibonacci
    '''
    while ant <= 4000000: # se establece la condición de que el número que se agregará no puede exceder a 4000000
        if ant%2 == 0: # se establece la condición de que sólo se sumen los números pares
            res += ant
        ant, sig = sig, ant + sig # se cambian las variables a los siguientes números de la serie
    return str(res) #se regresa una cadena de caracteres con el resultado

print('La suma de todos los números pares y menores a 4000000 que se encuentren en la serie de Fibonacci es: ')
print(suma_fibo())


# In[ ]:




